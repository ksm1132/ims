# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "staging2" ]
  pull_request:
    branches: [ "staging2" ]

jobs:
  build:

    runs-on: ubuntu-latest

    permissions:
      contents: read
      security-events: write
      pull-requests: write


    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U ${POSTGRES_USER}"
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5


    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Set environment variables
      env:
       SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/${{ secrets.POSTGRES_DB }}
       SPRING_DATASOURCE_USERNAME: ${{ secrets.POSTGRES_USER }}
       SPRING_DATASOURCE_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      run: echo "Environment variables set"

    - name: Build with Maven
      run: mvn clean package -Dtest=!OrderUiTest

    - name: Create staging directory and copy JAR file
      run: mkdir staging && cp target/*.jar staging

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: Package
        path: staging


      # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive

    - name: Update dependency graph
      if: ${{ false }}
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build  # 'build'ジョブが成功したら実行

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: Package
          path: staging  # stagingにアーティファクトをダウンロード

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

#      - name: Create imagedefinitions.json
#        run: |
#          echo '[{"name":"ims-app", "imageUri":"${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/ims-app:app-latest"}]' > imagedefinitions.json
#
#      - name: Upload imagedefinitions.json to S3
#        run: |
#          aws s3 cp imagedefinitions.json s3://test-artifact-202410xx/ims-app/
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
#
#      - name: Download imagedefinitions.json from S3
#        run: |
#          aws s3 cp s3://test-artifact-202410xx/ims-app/imagedefinitions.json .
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Log in to AWS ECR
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          aws ecr get-login-password | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/ims-app


      - name: Build and Push App Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile-app-gha
          push: true
          tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/ims-app:app-latest


      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster ims-app3 \
            --service ims-app \
            --force-new-deployment \
            --region ${{ secrets.AWS_DEFAULT_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

#      - name: Build and Push PostgreSQL Docker image
#        uses: docker/build-push-action@v4
#        with:
#          context: .
#          file: Dockerfile-postgres-gha
#          push: true
#          tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/ims-app:postgres-latest
#


###### for DockerHub
#      - name: Log in to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#      - name: Build and Push Docker image
#        uses: docker/build-push-action@v4
#        with:
#          context: .
#          file: Dockerfile-app-gha
#          push: true
#          tags: ${{ secrets.DOCKER_USERNAME }}/myfavoriterepo:latest
